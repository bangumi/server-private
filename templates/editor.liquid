{% assign title = 'edit' %}
{% layout 'layout' %}

{% block content %}
<script src='https://cdn.jsdelivr.net/npm/monaco-editor/min/vs/loader.js'></script>

<div class='container mt-5'>
  <div class='row'>
    <label for='name'></label>
    <input type='text' id='name' placeholder='name' value='{{ name }}'>
  </div>
  <br>
  <div class='row'>
    {% for platform in platforms %}
      <div class='form-check-inline'>
        <label class='form-check-label'>
          <input
            type='radio'
            class='form-check-input'
            name='platform'
            value='{{ platform.id }}'
            {% if platformID == platform.id %}
              checked
            {% endif %}
          >
          {{ platform.type_cn }}
        </label>
      </div>
    {% endfor %}
  </div>
  <div class='row'>
    <div
      id='infobox'
      data-raw='{{ infobox }}'
      style='width: 100%; height: 50vh; border: 1px solid grey'
    ></div>
  </div>
  <br>
  <div class='row'>
    <label for='summary'></label>
    <textarea
      name='summary'
      id='summary'
      style='width: 100%; height: 20vh'
    >{{ summary }}</textarea>
  </div>
  <br>
  <div class='row'>
    <div class='form-group'>
      <label for='date'
        >开播日期/连载开始日期/上映时间/发售时间，默认会从 infobox
        中提取。填写之后会覆盖infobox内置的日期</label
      >
      <input class='form-control' type='text' id='date'>
    </div>
  </div>
  <br>
  <div class=' row'>
    <label for='commitMessage'></label>
    <input type='text' id='commitMessage' placeholder='编辑说明'>
  </div>
  <br>
  <div class='row'>
    <button class='btn btn-primary' id='submit'>submit</button>
  </div>
</div>

<script>
  const infobox = $('#infobox').data('raw');
  const subjectID = '{{ subjectID }}';
</script>
{% raw %}
  <script>
    require.config({ paths: { vs: 'https://cdn.jsdelivr.net/npm/monaco-editor/min/vs' } });

    require(['vs/editor/editor.main'], function() {
      monaco.languages.register({ id: 'wiki' });

      monaco.languages.setLanguageConfiguration('wiki', {
        brackets: [
          ['{', '}'],
          ['[', ']'],
          ['{{', '}}'],
        ],

        autoClosingPairs: [
          { open: '{', close: '}' },
          { open: '[', close: ']' },
        ],
      });

      monaco.languages.setMonarchTokensProvider('wiki', {
        default: 'invalid',
        brackets: [
          ['{', '}', 'delimiter.curly'],
          ['[', ']', 'delimiter.square'],
          ['{{', '}}', 'delimiter.doubleCurly'],
        ],

        keywords: ['Infobox'],

        operators: ['='],

        tokenizer: {
          root: [[/{{Infobox/, 'metatag', '@doctype']],

          doctype: [
            [/[^|]*$/, 'string'],
            [/\|[^=]+/, 'variable', '@field'],
            [/\|[^=]+/, 'variable', '@field'],
            [/}}/, { token: 'metatag', next: '@pop' }],
          ],

          field: [
            [/=/, { token: 'delimiter' }],
            [/{/, 'delimiter', '@array'],
            [/[^{n]+/, { token: 'string', next: '@pop' }],
          ],

          array: [
            [/\[/, { token: 'delimiter', next: '@arrayItem' }],
            [/}/, { token: '@rematch', next: '@doctype' }],
          ],

          // `日文名|ワンピース]`
          // `航海王]`
          arrayItem: [
            [/(.+)(\|)([^\]]*)/, ['identify', 'delimiter', 'string']],
            [/[^\]]+/, { token: 'string' }],
            [/]$/, { token: 'delimiter', next: '@pop' }],
          ],
        },
      });

      const editor = monaco.editor.create(document.getElementById('infobox'), {
        value: infobox,
        language: 'wiki',
        wordWrap: 'on',
        minimap: {
          enabled: false,
        },
      });

      $('#submit').on('click', async () => {
        const res = await fetch(`/p1/wiki/subjects/${subjectID}`, {
          method: 'PATCH',
          headers: {
            'content-type': 'application/json',
          },
          credentials: 'same-origin',
          body: JSON.stringify({
            commitMessage: $('#commitMessage').val(),
            subject: {
              name: $('#name').val(),
              date: $('#date').val() || undefined,
              infobox: editor.getValue(),
              platform: Number.parseInt($('input[name="platform"]:checked').val()) || 0,
              summary: $('#summary').val(),
            },
          }),
        });

        if (!res.ok) {
          alert(JSON.stringify(await res.json(), null, 2));
        } else {
          location.href = `https://bgm.tv/subject/${subjectID}`;
        }
      });
    });
  </script>
{% endraw %}

{% endblock %}
